"""init_schema_for_etl_pipeline

Revision ID: 7a2c83609cf5
Revises: 
Create Date: 2025-10-21 20:20:08.106184

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2


# revision identifiers, used by Alembic.
revision: str = '7a2c83609cf5'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE EXTENSION IF NOT EXISTS postgis")
    op.create_table('owners',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('fingerprint', sa.String(length=64), nullable=False),
    sa.Column('name', sa.String(length=256), nullable=True),
    sa.Column('owner_type', sa.String(length=32), nullable=False),
    sa.Column('contact_phone', sa.String(length=32), nullable=True),
    sa.Column('contact_telegram', sa.String(length=64), nullable=True),
    sa.Column('contact_viber', sa.String(length=32), nullable=True),
    sa.Column('contact_whatsapp', sa.String(length=32), nullable=True),
    sa.Column('contact_email', sa.String(length=128), nullable=True),
    sa.Column('rating', sa.Float(), nullable=False),
    sa.Column('listing_count', sa.Integer(), nullable=False),
    sa.Column('verified', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('owners_pkey')),
    sa.UniqueConstraint('fingerprint', name=op.f('owners_fingerprint_key'))
    )
    op.create_index('ix_owner_phone', 'owners', ['contact_phone'], unique=False)
    op.create_index('ix_owner_type_rating', 'owners', ['owner_type', 'rating'], unique=False)
    op.create_index(op.f('ix_owners_owner_type'), 'owners', ['owner_type'], unique=False)
    op.create_index(op.f('ix_owners_verified'), 'owners', ['verified'], unique=False)
    op.create_table('sources',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code', sa.String(length=32), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('sources_pkey')),
    sa.UniqueConstraint('code', name=op.f('sources_code_key'))
    )
    op.create_table('listings',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('source_id', sa.Integer(), nullable=False),
    sa.Column('external_id', sa.String(length=128), nullable=False),
    sa.Column('owner_id', sa.BigInteger(), nullable=True),
    sa.Column('url', sa.Text(), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('fingerprint', sa.String(length=64), nullable=False),
    sa.Column('price_amount', sa.Float(), nullable=True),
    sa.Column('price_currency', sa.String(length=8), nullable=True),
    sa.Column('address_country', sa.String(length=64), nullable=True),
    sa.Column('address_state', sa.String(length=128), nullable=True),
    sa.Column('address_city', sa.String(length=128), nullable=True),
    sa.Column('address_district', sa.String(length=128), nullable=True),
    sa.Column('address_street', sa.String(length=256), nullable=True),
    sa.Column('address_building', sa.String(length=64), nullable=True),
    sa.Column('address_zip', sa.String(length=32), nullable=True),
    sa.Column('location', geoalchemy2.types.Geography(geometry_type='POINT', srid=4326, dimension=2, from_text='ST_GeogFromText', name='geography'), nullable=True),
    sa.Column('room_count', sa.Integer(), nullable=True),
    sa.Column('area', sa.Float(), nullable=True),
    sa.Column('floor', sa.Integer(), nullable=True),
    sa.Column('total_floors', sa.Integer(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('owner_name', sa.String(length=256), nullable=True),
    sa.Column('owner_type_declared', sa.String(length=32), nullable=True),
    sa.Column('status', sa.String(length=32), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('view_count', sa.Integer(), nullable=False),
    sa.Column('first_seen_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_seen_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['owners.id'], name=op.f('listings_owner_id_fkey'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['source_id'], ['sources.id'], name=op.f('listings_source_id_fkey'), ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('listings_pkey')),
    sa.UniqueConstraint('source_id', 'external_id', name='uq_listing_src_ext')
    )
    op.create_index('ix_listing_city_price', 'listings', ['address_city', 'price_amount'], unique=False)
    op.create_index('ix_listing_fingerprint_status', 'listings', ['fingerprint', 'status'], unique=False)
    op.create_index('ix_listing_status_updated', 'listings', ['status', 'updated_at'], unique=False)
    op.create_index(op.f('ix_listings_address_city'), 'listings', ['address_city'], unique=False)
    op.create_index(op.f('ix_listings_fingerprint'), 'listings', ['fingerprint'], unique=False)
    op.create_index(op.f('ix_listings_first_seen_at'), 'listings', ['first_seen_at'], unique=False)
    op.create_index(op.f('ix_listings_last_seen_at'), 'listings', ['last_seen_at'], unique=False)
    op.create_index(op.f('ix_listings_status'), 'listings', ['status'], unique=False)
    op.create_table('raw_listings',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('source_id', sa.Integer(), nullable=False),
    sa.Column('external_id', sa.String(length=128), nullable=False),
    sa.Column('payload', sa.JSON(), nullable=False),
    sa.Column('schema_version', sa.String(length=16), nullable=False),
    sa.Column('fetch_url', sa.Text(), nullable=True),
    sa.Column('fetched_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('processing_status', sa.String(length=32), nullable=False),
    sa.Column('processing_error', sa.Text(), nullable=True),
    sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['source_id'], ['sources.id'], name=op.f('raw_listings_source_id_fkey'), ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('raw_listings_pkey')),
    sa.UniqueConstraint('source_id', 'external_id', name='uq_raw_src_ext')
    )
    op.create_index(op.f('ix_raw_listings_fetched_at'), 'raw_listings', ['fetched_at'], unique=False)
    op.create_index(op.f('ix_raw_listings_processing_status'), 'raw_listings', ['processing_status'], unique=False)
    op.create_index('ix_raw_status_fetched', 'raw_listings', ['processing_status', 'fetched_at'], unique=False)
    op.create_table('listing_photos',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('listing_id', sa.BigInteger(), nullable=False),
    sa.Column('url', sa.Text(), nullable=False),
    sa.Column('order', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['listing_id'], ['listings.id'], name=op.f('listing_photos_listing_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('listing_photos_pkey'))
    )
    op.create_table('listing_price_history',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('listing_id', sa.BigInteger(), nullable=False),
    sa.Column('price_amount', sa.Float(), nullable=False),
    sa.Column('price_currency', sa.String(length=8), nullable=False),
    sa.Column('recorded_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['listing_id'], ['listings.id'], name=op.f('listing_price_history_listing_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('listing_price_history_pkey'))
    )
    op.create_index(op.f('ix_listing_price_history_recorded_at'), 'listing_price_history', ['recorded_at'], unique=False)
    op.create_index('ix_price_history_listing_date', 'listing_price_history', ['listing_id', 'recorded_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_price_history_listing_date', table_name='listing_price_history')
    op.drop_index(op.f('ix_listing_price_history_recorded_at'), table_name='listing_price_history')
    op.drop_table('listing_price_history')
    op.drop_table('listing_photos')
    op.drop_index('ix_raw_status_fetched', table_name='raw_listings')
    op.drop_index(op.f('ix_raw_listings_processing_status'), table_name='raw_listings')
    op.drop_index(op.f('ix_raw_listings_fetched_at'), table_name='raw_listings')
    op.drop_table('raw_listings')
    op.drop_index(op.f('ix_listings_status'), table_name='listings')
    op.drop_index(op.f('ix_listings_last_seen_at'), table_name='listings')
    op.drop_index(op.f('ix_listings_first_seen_at'), table_name='listings')
    op.drop_index(op.f('ix_listings_fingerprint'), table_name='listings')
    op.drop_index(op.f('ix_listings_address_city'), table_name='listings')
    op.drop_index('ix_listing_status_updated', table_name='listings')
    op.drop_index('ix_listing_fingerprint_status', table_name='listings')
    op.drop_index('ix_listing_city_price', table_name='listings')
    op.drop_index('idx_listings_location', table_name='listings', postgresql_using='gist')
    op.drop_table('listings')
    op.drop_table('sources')
    op.drop_index(op.f('ix_owners_verified'), table_name='owners')
    op.drop_index(op.f('ix_owners_owner_type'), table_name='owners')
    op.drop_index('ix_owner_type_rating', table_name='owners')
    op.drop_index('ix_owner_phone', table_name='owners')
    op.drop_table('owners')
    op.execute("DROP EXTENSION IF EXISTS postgis CASCADE")
    # ### end Alembic commands ###
